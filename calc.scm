(define (calc)
	(display "calc: ")
	(flush)
	(print (calc-eval (read)))
	(calc))
	
(define (calc-eval exp)
	(cond ((number? exp) exp)
		((list? exp) (calc-apply (car exp) (map calc-eval (cdr exp))))
		;((list? exp) (calc-apply (car exp) (cdr exp))) ; removing the map calc-eval will result in normal order
		(else (error "Calc: bad expression:" exp))))

(define (calc-apply fn args)
	(cond ((eq? fn '+) (accumulate + 0 args))
		  ((eq? fn '-) (cond ((null? args) (error "Calc: no args to -"))
				((= (length args) 1) (- (car args)))
				(else (- (car args) (accumulate + 0 (cdr args))))))
		  ((eq? fn '*) (accumulate * 1 args))
		  ((eq? fn '/) (cond ((null? args) (error "Calc: no args to /"))
				((= (length args) 1) (/ (car args)))
				(else (/ (car args) (accumulate * 1 (cdr args))))))
		  (else (error "Calc: bad operator:" fn))))