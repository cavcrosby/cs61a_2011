(define (simps_rule f a b n)
	(define delta_x (/ (- b a) n))
	(define (compute f a b n delta_x)
			(if (equal? delta_x b)
				0
				(* (/ (/ (- b a) n) 3)
				(cond ((= delta_x b) (+ (f delta_x) (compute f a b n (+ delta_x (/ (- b a) n)))))
					  ((= delta_x a) (+ (f delta_x) (compute f a b n (+ delta_x (/ (- b a) n)))))
					  (else (if (remainder (/ (/ (- b a) n) delta_x) 0)
								(+ (* (f delta_x) 2) (compute f a b n (+ delta_x (/ (- b a) n))))
								(+ (* (f delta_x) 4) (compute f a b n (+ delta_x (/ (- b a) n))))))))))
	(compute f a b n delta_x)
)